import random  # Импортируем модуль random для генерации случайных чисел

# Функция, реализующая бинарный поиск и возвращающая количество попыток для угадывания заданного числа
def binary_search_guess(secret_number):
    low = 1               # Нижняя граница диапазона
    high = 100            # Верхняя граница диапазона
    attempts = 0          # Счётчик количества попыток

    while low <= high:    # Пока границы не сошлись
        attempts += 1     # Увеличиваем счётчик попыток
        guess = (low + high) // 2  # Берём середину текущего диапазона

        if guess == secret_number:     # Если угадали число
            return attempts            # Возвращаем количество попыток
        elif guess < secret_number:    # Если предположение меньше загаданного числа
            low = guess + 1            # Сдвигаем нижнюю границу вверх
        else:                          # Иначе (если предположение больше)
            high = guess - 1           # Сдвигаем верхнюю границу вниз

# Функция, симулирующая угадывание 1000 случайных чисел и подсчитывающая среднее число попыток
def simulate_guesses(trials=1000):
    total_attempts = 0     # Суммарное количество попыток за все игры

    for _ in range(trials):                   # Повторяем процесс угадывания `trials` раз (1000 по умолчанию)
        secret_number = random.randint(1, 100)  # Генерируем случайное число от 1 до 100
        attempts = binary_search_guess(secret_number)  # Угадываем число и получаем количество попыток
        total_attempts += attempts                     # Добавляем попытки к общему счётчику

    average_attempts = total_attempts / trials  # Вычисляем среднее количество попыток
    print(f"Среднее количество попыток за {trials} игр: {average_attempts:.2f}")  # Выводим результат

simulate_guesses()  # Запускаем симуляцию угадывания чисел
